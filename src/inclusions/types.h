#ifndef TYPES_H
#define TYPES_H

/* Types simples */
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned int uint32;
typedef unsigned long long uint64;

typedef int int32;

typedef enum {
	TRUE = 1,
	FALSE = 0
} bool;


/* Types compos√©s */
#define CAST_STRUCT_TO_INT(_struct) (*((int*)((void*)(&_struct))))
#define CAST_INT_TO_STRUCT(_int, _struct_t) (*((_struct_t*)((void*)(&_int))))

typedef struct Liste {
	void* car;
	struct Liste* cdr;
} Liste;

typedef char* String;
typedef String StringZ;

#define LONGUEUR(t) (sizeof (t) / sizeof (*(t)))


/* Attributs */
#define ALIGNED(alignement) __attribute__ ((aligned(alignement)))
#define PACKED __attribute__ ((packed))
#define USED __attribute__ ((used))
#define SECTION(sec) __attribute__ ((section(#sec)))


/* Constantes */
#define NULL (void*)0


/* Prototypes de fonctions */

/*                Comparaison  ComparaisonStricte
 * a < b : return <0           <0
 * a = b : return peu importe  =0
 * a > b : return >=0          >0 */
typedef int (Comparaison)(void* a, void* b);

typedef Comparaison ComparaisonStricte;

typedef void* (AccesseurIndex)(void* t, uint32 index);

typedef void (AccesseurEchanger)(void* t, uint32 a, uint32 b);


#endif
