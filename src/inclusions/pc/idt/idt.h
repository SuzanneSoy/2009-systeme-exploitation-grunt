#ifndef PC_IDT_IDT_H
#define PC_IDT_IDT_H

#include <types.h>

typedef enum {
	DESCRIPTEUR_PORTE_TACHE = 1,
	DESCRIPTEUR_PORTE_INTERRUPTION = 2,
	DESCRIPTEUR_PORTE_TRAPPE = 3
} TypeDescripteurInterruption;

typedef enum {
	TAILLE_PORTE_16 = 0,
	TAILLE_PORTE_32 = 1
} TaillePorte;

/* x86-doc-vol3.pdf section 5.11, fig 5-2 */
typedef struct DescripteurInterruption {
	uint16 offset_15_0;
	
	uint16 selecteurSegment;
	
	uint8 _zero_a;
	/* TypeDescripteurInterruption type:2;
	uint8 _un:1;
	TaillePorte taillePorte:1;
	uint8 _zero_b:1; */
	uint8 type:5;
	
	uint8 niveauPrivilegeDescripteur:2;
	bool  present:1;
	
	uint16 offset_31_16;
} PACKED ALIGNED(8) DescripteurInterruption;


/* x86-doc-vol3.pdf section 2.4.1, fig 2.5 */
typedef struct RegistreIDTR {
	uint16 limite;
	DescripteurInterruption* base;
} PACKED ALIGNED (8) RegistreIDTR;
/* TODO : VÃ©rifier le ALIGNED 4 :
 * x86-doc-vol3.pdf section 3.5.1, 2e page */


typedef void (*EnregistreurContexteInterruption) ();
typedef void (*GestionnaireInterruption) ();


typedef struct EtatIdt {
	DescripteurInterruption tableDescripteursInterruption[256];
	int interruptionsDesactivees;
	int nombreDescripteursInterruption;
	RegistreIDTR registreIDTR;
} EtatIdt;


int desactiverInterruptions();
int activerInterruptions();
void definirGestionnaireInterruption(int numeroInterruption, GestionnaireInterruption gestionnaire);
void activerInterruption(int numeroInterruption);
void desactiverInterruption(int numeroInterruption);

#endif
