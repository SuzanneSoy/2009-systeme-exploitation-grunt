#ifndef PC_IRQ_IRQ_H
#define PC_IRQ_IRQ_H

#define PORT_PIC_MAITRE_COMMANDE  0x0020
#define PORT_PIC_MAITRE_DONNEES   0x0021
#define PORT_PIC_ESCLAVE_COMMANDE 0x00A0
#define PORT_PIC_ESCLAVE_DONNEES  0x00A1

/* 8259A page 10-12 (fig 7) */
typedef enum {
	PIC_ICW1_SEUL    = 1,
	PIC_ICW1_CASCADE = 0
} PIC_ICW1_SNGL;

typedef enum {
	PIC_ICW1_INTERVALLE_4 = 1,
	PIC_ICW1_INTERVALLE_8 = 0
} PIC_ICW1_ADI;

typedef enum {
	PIC_ICW1_LEVEL_TRIGGERED_MODE = 1,
	PIC_ICW1_EDGE_TRIGGERED_MODE  = 0
} PIC_ICW1_LTIM;

typedef struct PicICW1 {
	bool ICW4_present:1;
	PIC_ICW1_SNGL single:1;
	PIC_ICW1_ADI  adi:1;
	PIC_ICW1_LTIM ltim:1;
	uint8 init:1;
	/* MCS-80/85 seulement :
	 * uint8 adresseVecteurInterruption_7_5:3; */
	uint8 _zero:4;
} PicICW1;


typedef struct PicICW2 {
	/* MCS-80/85 seulement :
	 * uint8 adresseVecteurInterruption_15_8; */
	uint8 _zero:3;
	uint8 adresseVecteurInterruption_7_3:5;
} PicICW2;
/* typedef uint8 PicICW2; */


#define ESCLAVE_CONNECTE_SUR_MAITRE_PATTE(patteConnexionMaitre) (1<<(patteConnexionMaitre))
typedef uint8 PicICW3_Maitre;

typedef struct PicICW3_Esclave {
	uint8 patteConnexionMaitre:3;
	uint8 _zero:5;
} PicICW3_Esclave;


typedef enum {
	PIC_ICW4_MODE_8086_8088 = 1,
	PIC_ICW4_MODE_MCS_80_85 = 0
} PIC_ICW4_MICRO_PM;

typedef enum {
	PIC_ICW4_MODE_SANS_TAMPON = (0 | 0),
	PIC_ICW4_TAMPON_ESCLAVE   = (2 | 0),
	PIC_ICW4_TAMPON_MAITRE    = (2 | 1)
} PIC_ICW4_BUF_MS;

typedef struct PicICW4 {
	PIC_ICW4_MICRO_PM microPM:1;
	bool autoEOI:1;
	PIC_ICW4_BUF_MS tampon:2;
	bool specialFullyNestedMode:1;
	uint8 _zero:3;
} PicICW4;


typedef void (*FonctionEnvoiFinInterruption) ();
typedef void (*GestionnaireRequeteInterruption) ();

typedef struct EtatIrq {
	FonctionEnvoiFinInterruption* tableFonctionsEnvoiFinInterruption;
	GestionnaireRequeteInterruption* tableGestionnairesRequeteInterruption;
	
	uint8 adresseVecteurInterruptionMaitre;
	uint8 adresseVecteurInterruptionEsclave;
	
	PicICW1 ICW1_Maitre;
	PicICW2 ICW2_Maitre;
	PicICW3_Maitre ICW3_Maitre;
	PicICW4 ICW4_Maitre;
	
	PicICW1 ICW1_Esclave;
	PicICW2 ICW2_Esclave;
	PicICW3_Esclave ICW3_Esclave;
	PicICW4 ICW4_Esclave;
	
	uint8 masqueMaitre;
	uint8 masqueEsclave;
	
	uint8 ancienMasqueMaitre;
	uint8 ancienMasqueEsclave;
} EtatIrq;


void definirGestionnaireRequeteInterruption(int ligne, GestionnaireRequeteInterruption gestionnaire);
void activerLigneRequeteInterruption(int ligne);
void desactiverLigneRequeteInterruption(int ligne);

#endif
