#ifndef PC_SOURIS_PS2_SOURIS_PS2_H
#define PC_SOURIS_PS2_SOURIS_PS2_H

#include <pc/kbc/kbc.h>

#define SOURIS_PS2_DEFINIR_RESOLUTION 0xe8
#define SOURIS_PS2_DEMANDER_PAQUET 0xeb
#define SOURIS_PS2_OBTENIR_MOUSE_ID 0xf2
#define SOURIS_PS2_DEFINIR_FREQUENCE 0xf3
#define SOURIS_PS2_AUTO_PAQUETS 0xf4
#define SOURIS_PS2_DESACTIVER_PAQUETS 0xf5
#define SOURIS_PS2_RESET 0xff

#define SOURIS_PS2_ACK 0xfa
#define SOURIS_PS2_RESET_1 0xaa
#define SOURIS_PS2_RESET_2 0x00

#define ENVOYER 1
#define RECEVOIR 2
#define ENVOYER_V 3
#define RECEVOIR_V 4
#define RECEVOIR_OU_PAS 42 /* Que la force soit avec la souris */
#define COMMANDE 5



static const uint8 DialogueDefinirResolution[] = {
	ENVOYER, SOURIS_PS2_DEFINIR_RESOLUTION,
	RECEVOIR, SOURIS_PS2_ACK,
	ENVOYER_V, 0,
	RECEVOIR, SOURIS_PS2_ACK
};

static const uint8 DialogueDemanderPaquet[] = {
	ENVOYER, SOURIS_PS2_DEMANDER_PAQUET,
	RECEVOIR, SOURIS_PS2_ACK
};

static const uint8 DialogueObtenirMouseID[] = {
	ENVOYER, SOURIS_PS2_OBTENIR_MOUSE_ID,
	RECEVOIR, SOURIS_PS2_ACK,
	RECEVOIR_V, 0
};

static const uint8 DialogueDefinirFrequence[] = {
	ENVOYER, SOURIS_PS2_DEFINIR_FREQUENCE,
	RECEVOIR, SOURIS_PS2_ACK,
	ENVOYER_V, 0,
	RECEVOIR, SOURIS_PS2_ACK
};

static const uint8 DialogueAutoPaquets[] = {
	ENVOYER, SOURIS_PS2_AUTO_PAQUETS,
	RECEVOIR, SOURIS_PS2_ACK
};

static const uint8 DialogueDesactiverPaquets[] = {
	ENVOYER, SOURIS_PS2_DESACTIVER_PAQUETS,
	RECEVOIR, SOURIS_PS2_ACK
};

static const uint8 DialogueReset[] = {
	ENVOYER, SOURIS_PS2_RESET,
	RECEVOIR_OU_PAS, SOURIS_PS2_ACK,
	RECEVOIR, SOURIS_PS2_RESET_1,
	RECEVOIR, SOURIS_PS2_RESET_2
};

static const uint8 DialogueObtenirCompaqStatusByte[] = {
	COMMANDE, KBC_DEMMANDE_LECTURE_COMPAQ_STATUS_BYTE,
	RECEVOIR_V, 0
	/* RECEVOIR_OU_PAS, 0xd8 Certaines versions de Bochs envoient myst√©rieusement cet octet. */
};

static const uint8 DialogueDefinirCompaqStatusByte[] = {
	COMMANDE, KBC_DEMMANDE_ECRITURE_COMPAQ_STATUS_BYTE,
	ENVOYER_V, 0
	/* RECEVOIR_OU_PAS, SOURIS_PS2_ACK */
};



typedef struct PaquetSourisPS2_1 {
	uint8 boutonGauche:1;
	uint8 boutonDroite:1;
	uint8 boutonMilieu:1;
	uint8 un:1;
	uint8 xNegatif:1;
	uint8 yNegatif:1;
	uint8 xOverflow:1;
	uint8 yOverflow:1;
} PaquetSourisPS2_1;

typedef enum {
	MOLETTE_DEFILEMENT_AUCUN = 0,
	MOLETTE_DEFILEMENT_HAUT = 1,
	MOLETTE_DEFILEMENT_BAS = 0xf,
	MOLETTE_DEFILEMENT_GAUCHE = 0xe,
	MOLETTE_DEFILEMENT_DROITE = 2
} ModeDefilementSourisPS2;

typedef struct PaquetSourisPS2_4 {
	uint8 ignorer:2;
	uint8 bouton5:1;
	uint8 bouton4:1;
	ModeDefilementSourisPS2 modeDefilement:4;
} PaquetSourisPS2_4;


typedef enum {
	ETAT_GESTIONNAIRE_SOURIS_PS2_ATTENTE,
	ETAT_GESTIONNAIRE_SOURIS_PS2_PAQUET,
	ETAT_GESTIONNAIRE_SOURIS_PS2_DIALOGUE
} EtatGestionnaireSourisPS2;

typedef void (*FonctionRappelSourisPS2) (bool erreur);

typedef struct DialogueSourisPS2 {
	const uint8* sequence;
	int longueur;
	uint8* parametre;
	FonctionRappelSourisPS2 rappel;
} DialogueSourisPS2;


typedef struct EtatSourisPS2 {
	uint8 resolution;
	uint8 frequence;
	uint8 mouseID;
	uint8 compaqStatusByte;
	bool resetPotentiel;
	uint8 paquets[4];
	int paquet;
	bool paquetsDoiventEtreZero;
	bool debordementXY;
	DialogueSourisPS2 dialogue;
	int etapeDialogue;
	EtatGestionnaireSourisPS2 etatGestionnaireSourisPS2;
	
	/* DEBUG */
	int32 curseur_x;
	int32 curseur_y;
	uint32 couleur;
} EtatSourisPS2;

#endif
